{"ast":null,"code":"import { ElementRef, ChangeDetectorRef, EventEmitter, SimpleChanges } from '@angular/core';\nimport { CharErrorCode } from './chart-events.interface';\nimport { en as countriesEN } from '@jagomf/countrieslist';\nimport { scale } from 'chroma-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./base-map.component\";\nconst _c0 = [\"mapContent\"];\n\nfunction CountriesMapComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"span\", 5);\n    i0.ɵɵtext(2, \"Loading map...\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction CountriesMapComponent_div_3_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.countryLabel);\n  }\n}\n\nfunction CountriesMapComponent_div_3_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.selection == null ? null : ctx_r4.selection.countryName);\n  }\n}\n\nfunction CountriesMapComponent_div_3_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \": \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CountriesMapComponent_div_3_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.selectionValue);\n  }\n}\n\nfunction CountriesMapComponent_div_3_div_10_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"span\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \": \");\n    i0.ɵɵelementStart(4, \"span\", 23);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r9 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r9.key);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r9.val);\n  }\n}\n\nfunction CountriesMapComponent_div_3_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, CountriesMapComponent_div_3_div_10_div_1_Template, 6, 2, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.selection == null ? null : ctx_r7.selection.extra);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"goes-first\": a0\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"has-value\": a0\n  };\n};\n\nfunction CountriesMapComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"div\", 8);\n    i0.ɵɵtemplate(3, CountriesMapComponent_div_3_span_3_Template, 2, 1, \"span\", 9);\n    i0.ɵɵtemplate(4, CountriesMapComponent_div_3_span_4_Template, 2, 1, \"span\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 11)(6, \"span\", 12);\n    i0.ɵɵtext(7);\n    i0.ɵɵtemplate(8, CountriesMapComponent_div_3_span_8_Template, 2, 0, \"span\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CountriesMapComponent_div_3_span_9_Template, 2, 1, \"span\", 14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(10, CountriesMapComponent_div_3_div_10_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c1, !ctx_r2.captionBelow));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.selection);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.selection);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c2, ctx_r2.selection));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.valueLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.selection);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.selection);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r2.selection == null ? null : ctx_r2.selection.extra) && (ctx_r2.selection == null ? null : ctx_r2.selection.extra.length) > 0);\n  }\n}\n\nconst exists = item => typeof item !== 'undefined' && item !== null;\n\nconst countryNum = item => {\n  var _a;\n\n  return parseInt((_a = item.value) === null || _a === void 0 ? void 0 : _a.toString());\n};\n\nconst countryClass = 'countryxx';\nconst oceanId = 'ocean';\n\nconst getStrokeWidth = isHovered => isHovered ? '0.2%' : '0.1%';\n\nconst getStrokeColor = isHovered => isHovered ? '#888' : '#afafaf';\n\nconst countryName = countryCode => {\n  return countriesEN[countryCode];\n};\n\nexport let CountriesMapComponent = /*#__PURE__*/(() => {\n  class CountriesMapComponent {\n    constructor(cdRef) {\n      this.cdRef = cdRef;\n      this.countryLabel = 'Country';\n      this.valueLabel = 'Value';\n      this.showCaption = true;\n      this.captionBelow = true;\n      this.minColor = 'white';\n      this.maxColor = 'red';\n      this.backgroundColor = 'white';\n      this.noDataColor = '#CFCFCF';\n      this.exceptionColor = '#FFEE58';\n      this.chartReady = new EventEmitter();\n      this.chartError = new EventEmitter();\n      this.chartSelect = new EventEmitter();\n      this.selection = null;\n      this.innerLoading = true;\n    }\n\n    get loading() {\n      return this.innerLoading;\n    }\n\n    get selectionValue() {\n      return this.data[this.selection.countryId].value;\n    }\n\n    getExtraSelected(country) {\n      const {\n        extra\n      } = this.data[country];\n      return extra && Object.keys(extra).map(key => ({\n        key,\n        val: extra[key]\n      }));\n    }\n\n    selectCountry(country) {\n      this.selection = country ? {\n        countryId: country,\n        countryName: countryName(country),\n        extra: this.getExtraSelected(country)\n      } : null;\n      this.cdRef.detectChanges();\n    }\n\n    ngAfterViewInit() {\n      this.initializeMap();\n    }\n\n    ngOnChanges(changes) {\n      const changedMapValueButNotOnStart = ['data', 'minColor', 'maxColor', 'backgroundColor', 'noDataColor', 'exceptionColor'].some(attr => changes[attr] && !changes[attr].firstChange);\n\n      if (changedMapValueButNotOnStart) {\n        this.initializeMap();\n      }\n    }\n\n    initializeMap() {\n      try {\n        // data is provided: might be able to paint countries in colors\n        if (this.data) {\n          // get highest value in range\n          const maxVal = exists(this.maxValue) ? this.maxValue : Object.values(this.data).reduce((acc, curr) => countryNum(curr) > acc || acc === null ? countryNum(curr) : acc, null); // get lowest value in range\n\n          const minVal = exists(this.minValue) ? this.minValue : Object.values(this.data).reduce((acc, curr) => countryNum(curr) < acc || acc === null ? countryNum(curr) : acc, null); // map values in range to colors\n\n          const valToCol = scale([this.minColor, this.maxColor]).colors((maxVal !== null && maxVal !== void 0 ? maxVal : 1) - (minVal !== null && minVal !== void 0 ? minVal : 0) + 1).reduce((acc, curr, i) => Object.assign(Object.assign({}, acc), {\n            [i + minVal]: curr\n          }), {}); // create local Map using provided data + calculated colors\n\n          this.mapData = Object.entries(this.data).reduce((acc, [countryId, countryVal]) => Object.assign(Object.assign({}, acc), {\n            [countryId.toLowerCase()]: Object.assign(Object.assign({}, countryVal), {\n              color: valToCol[countryNum(countryVal)] // value in between minVal and maxVal\n              || ( // value below minVal\n              countryNum(countryVal) <= minVal ? valToCol[minVal] : // value above maxVal\n              countryNum(countryVal) >= maxVal ? valToCol[maxVal] // weird; should never get to here\n              : this.exceptionColor)\n            })\n          }), {}); // no data provided: will paint plain map\n        } else {\n          this.mapData = {};\n        }\n\n        const svgMap = this.mapContent.nativeElement.children[0];\n        svgMap.style.backgroundColor = this.backgroundColor;\n        svgMap.querySelectorAll(`.${countryClass}`).forEach(item => {\n          const mapItem = this.mapData[item.id.toLowerCase()];\n          const isException = mapItem ? !exists(mapItem.value) : false;\n          item.style.fill = mapItem ? isException ? this.exceptionColor : mapItem.color : this.noDataColor;\n          item.onmouseenter = this.countryHover.bind(this, item, true);\n          item.onmouseleave = this.countryHover.bind(this, item, false);\n        });\n        this.innerLoading = false;\n        this.cdRef.detectChanges();\n        this.onChartReady();\n      } catch (e) {\n        this.onCharterror({\n          id: CharErrorCode.loading,\n          message: 'Could not load'\n        });\n      }\n    }\n\n    countryHover(item, hovered) {\n      item.style.strokeWidth = getStrokeWidth(hovered);\n      item.style.stroke = getStrokeColor(hovered);\n      item.querySelectorAll('.landxx').forEach(i => {\n        i.style.strokeWidth = getStrokeWidth(hovered);\n        i.style.stroke = getStrokeColor(hovered);\n      });\n    }\n\n    onChartReady() {\n      if (this.innerLoading) {\n        this.innerLoading = false;\n        this.chartReady.emit();\n      }\n    }\n\n    onCharterror(error) {\n      this.chartError.emit(error);\n    }\n\n    onMapSelect({\n      target\n    }) {\n      const event = {\n        selected: false,\n        value: null,\n        country: null\n      };\n      let newItem;\n\n      if (target.id === oceanId) {\n        this.selectCountry(null);\n      } else {\n        newItem = target;\n\n        while (!newItem.classList.contains(countryClass)) {\n          newItem = newItem.parentNode;\n        }\n      }\n\n      const country = this.mapData[newItem === null || newItem === void 0 ? void 0 : newItem.id];\n\n      if (country) {\n        event.selected = true;\n        event.value = countryNum(country);\n        event.country = newItem.id.toUpperCase();\n        this.selectCountry(event.country);\n      } else {\n        this.selectCountry(null);\n      }\n\n      this.chartSelect.emit(event);\n    }\n\n  }\n\n  CountriesMapComponent.ɵfac = function CountriesMapComponent_Factory(t) {\n    return new (t || CountriesMapComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  CountriesMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountriesMapComponent,\n    selectors: [[\"countries-map\"]],\n    viewQuery: function CountriesMapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapContent = _t.first);\n      }\n    },\n    inputs: {\n      data: \"data\",\n      countryLabel: \"countryLabel\",\n      valueLabel: \"valueLabel\",\n      showCaption: \"showCaption\",\n      captionBelow: \"captionBelow\",\n      minValue: \"minValue\",\n      maxValue: \"maxValue\",\n      minColor: \"minColor\",\n      maxColor: \"maxColor\",\n      backgroundColor: \"backgroundColor\",\n      noDataColor: \"noDataColor\",\n      exceptionColor: \"exceptionColor\"\n    },\n    outputs: {\n      chartReady: \"chartReady\",\n      chartError: \"chartError\",\n      chartSelect: \"chartSelect\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 5,\n    consts: [[\"class\", \"major-block loading\", 4, \"ngIf\"], [1, \"major-block\", \"cm-map-content\", 3, \"ngClass\", \"click\"], [\"mapContent\", \"\"], [\"class\", \"major-block cm-caption-container\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"major-block\", \"loading\"], [1, \"text\"], [1, \"major-block\", \"cm-caption-container\", 3, \"ngClass\"], [1, \"cm-simple-caption\"], [1, \"cm-country-label\"], [\"class\", \"cm-default-label\", 4, \"ngIf\"], [\"class\", \"cm-country-name\", 4, \"ngIf\"], [1, \"cm-value-label\"], [1, \"cm-value-text\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"cm-value-content\", 4, \"ngIf\"], [\"class\", \"cm-extended-caption\", 4, \"ngIf\"], [1, \"cm-default-label\"], [1, \"cm-country-name\"], [1, \"cm-value-content\"], [1, \"cm-extended-caption\"], [\"class\", \"cm-extended-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"cm-extended-item\"], [1, \"cm-extended-label\"], [1, \"cm-extended-value\"]],\n    template: function CountriesMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CountriesMapComponent_div_0_Template, 3, 0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"countries-map-base\", 1, 2);\n        i0.ɵɵlistener(\"click\", function CountriesMapComponent_Template_countries_map_base_click_1_listener($event) {\n          return ctx.onMapSelect($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, CountriesMapComponent_div_3_Template, 11, 12, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, ctx.captionBelow));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.showCaption);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.CountriesMapBaseComponent],\n    styles: [\"[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;justify-content:space-between;align-items:stretch;align-content:stretch}.major-block.loading[_ngcontent-%COMP%]{flex:0 1 auto;align-self:center}.major-block.loading[_ngcontent-%COMP%]   .text[_ngcontent-%COMP%]{font-style:italic;font-family:sans-serif;color:gray}.major-block.cm-map-content[_ngcontent-%COMP%]{flex:0 1 auto}.major-block.goes-first[_ngcontent-%COMP%]{order:0}.major-block[_ngcontent-%COMP%]:not(.goes-first){order:1}.major-block.cm-caption-container[_ngcontent-%COMP%]{flex:0 1 auto;display:flex;flex-flow:column nowrap;justify-content:space-between}.cm-simple-caption[_ngcontent-%COMP%]{display:flex;flex-flow:row nowrap;justify-content:space-between}.cm-country-label[_ngcontent-%COMP%]{flex:0 1 auto;align-self:flex-start}.cm-value-label[_ngcontent-%COMP%]{flex:0 1 auto;align-self:flex-end}.cm-country-label[_ngcontent-%COMP%], .cm-value-label[_ngcontent-%COMP%]{flex:0 1 auto}.cm-country-label[_ngcontent-%COMP%]   .cm-country-name[_ngcontent-%COMP%]{font-weight:700}.cm-country-label[_ngcontent-%COMP%]   .cm-country-name[_ngcontent-%COMP%], .cm-value-label[_ngcontent-%COMP%]   .cm-value-text[_ngcontent-%COMP%]{color:#333}.cm-country-label[_ngcontent-%COMP%]   .cm-default-label[_ngcontent-%COMP%], .cm-value-label[_ngcontent-%COMP%]   .cm-value-text[_ngcontent-%COMP%]:not(.has-value){font-style:italic;color:#777}.cm-extended-caption[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));grid-gap:5px}.cm-extended-item[_ngcontent-%COMP%]{margin:5px auto}.cm-extended-item[_ngcontent-%COMP%]   .cm-extended-label[_ngcontent-%COMP%]{font-weight:700}\"],\n    changeDetection: 0\n  });\n  return CountriesMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}