{"version":3,"file":"countries-map.js","sources":["../../../projects/lib/src/lib/base-map.component.ts","../../../projects/lib/src/lib/chart-events.interface.ts","../../../projects/lib/src/lib/countries-map.component.ts","../../../projects/lib/src/lib/countries-map.module.ts","../../../projects/lib/src/countries-map.ts"],"names":["countriesEN"],"mappings":"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","sourcesContent":["import { Component } from \"@angular/core\";\n\n/**\n * @private Do not use this component in your app. Use `CountriesMapComponent` instead.\n */\n@Component({\n  selector: 'countries-map-base',\n  templateUrl: './base-map.component.svg',\n  styles: ['']\n})\nexport class CountriesMapBaseComponent {\n}\n","export interface ChartSelectEvent {\n  selected: boolean;\n  value?: number;\n  country: string;\n}\n\nexport enum CharErrorCode {loading = 'loading'}\n\nexport interface ChartErrorEvent {\n  id: string | CharErrorCode;\n  message: string;\n  detailedMessage?: string;\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { CharErrorCode } from './chart-events.interface';\nimport type { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\nimport type { CountriesData, SelectionExtra, DrawableCountries, Selection,\n  ValidExtraData, DrawableCountry, CountryData } from './data-types.interface';\nimport { en as countriesEN } from '@jagomf/countrieslist';\nimport { scale } from 'chroma-js';\n\nconst exists = item => typeof item !== 'undefined' && item !== null;\nconst countryNum = (item: CountryData) => parseInt(item.value?.toString());\n\nconst countryClass = 'countryxx';\nconst oceanId = 'ocean';\nconst getStrokeWidth = (isHovered: boolean) => isHovered ? '0.2%' : '0.1%';\nconst getStrokeColor = (isHovered: boolean) => isHovered ? '#888' : '#afafaf';\n\nconst countryName = (countryCode: string): string => {\n  return countriesEN[countryCode];\n};\n\n@Component({\n  selector: 'countries-map',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './countries-map.component.html',\n  styleUrls: ['./countries-map.component.scss']\n})\nexport class CountriesMapComponent implements AfterViewInit, OnChanges {\n\n  @Input() data: CountriesData;\n  @Input() countryLabel = 'Country';\n  @Input() valueLabel = 'Value';\n  @Input() showCaption = true;\n  @Input() captionBelow = true;\n  @Input() minValue: number;\n  @Input() maxValue: number;\n  @Input() minColor = 'white';\n  @Input() maxColor = 'red';\n  @Input() backgroundColor = 'white';\n  @Input() noDataColor = '#CFCFCF';\n  @Input() exceptionColor = '#FFEE58';\n\n  @Output() private readonly chartReady = new EventEmitter<void>();\n  @Output() private readonly chartError = new EventEmitter<ChartErrorEvent>();\n  @Output() private readonly chartSelect = new EventEmitter<ChartSelectEvent>();\n\n  @ViewChild('mapContent', { static: false, read: ElementRef }) private readonly mapContent: ElementRef<HTMLElement>;\n\n  mapData: DrawableCountries;\n  selection: Selection | null = null;\n\n  private innerLoading = true;\n  get loading(): boolean {\n    return this.innerLoading;\n  }\n\n  get selectionValue(): ValidExtraData {\n    return this.data[this.selection.countryId].value;\n  }\n\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n  ) { }\n\n  private getExtraSelected(country: string): SelectionExtra[] | null {\n    const { extra } = this.data[country];\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\n  }\n\n  private selectCountry(country?: string): void {\n    this.selection = country ? {\n      countryId: country,\n      countryName: countryName(country),\n      extra: this.getExtraSelected(country)\n    } : null;\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializeMap();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const changedMapValueButNotOnStart = ['data', 'minColor', 'maxColor', 'backgroundColor', 'noDataColor', 'exceptionColor']\n      .some(attr => changes[attr] && !changes[attr].firstChange);\n\n    if (changedMapValueButNotOnStart) {\n      this.initializeMap();\n    }\n  }\n\n  private initializeMap(): void {\n    try {\n      // data is provided: might be able to paint countries in colors\n      if (this.data) {\n        // get highest value in range\n        const maxVal = exists(this.maxValue) ? this.maxValue : Object.values(this.data).reduce(\n          (acc, curr) => countryNum(curr) > acc || acc === null? countryNum(curr) : acc, null as number\n        );\n        // get lowest value in range\n        const minVal = exists(this.minValue) ? this.minValue : Object.values(this.data).reduce(\n          (acc, curr) => countryNum(curr) < acc || acc === null? countryNum(curr) : acc, null as number\n        );\n\n        // map values in range to colors\n        const valToCol = scale([this.minColor, this.maxColor]).colors((maxVal ?? 1) - (minVal ?? 0) + 1).reduce((acc, curr, i) =>\n          ({ ...acc, [i + minVal]: curr }), {} as { [key: number]: string }\n        );\n\n        // create local Map using provided data + calculated colors\n        this.mapData = Object.entries(this.data).reduce((acc, [ countryId, countryVal ]) =>\n          ({ ...acc,\n            [countryId.toLowerCase()]: {\n              ...countryVal,\n              color: valToCol[countryNum(countryVal)] // value in between minVal and maxVal\n                || (\n                  // value below minVal\n                  countryNum(countryVal) <= minVal ? valToCol[minVal] :\n                  // value above maxVal\n                  countryNum(countryVal) >= maxVal ? valToCol[maxVal]\n                  // weird; should never get to here\n                    : this.exceptionColor\n                )\n            } as DrawableCountry }),\n          {} as DrawableCountries\n        );\n\n      // no data provided: will paint plain map\n      } else {\n        this.mapData = {};\n      }\n\n      const svgMap = this.mapContent.nativeElement.children[0] as SVGSVGElement;\n      svgMap.style.backgroundColor = this.backgroundColor;\n      svgMap.querySelectorAll<SVGSVGElement>(`.${countryClass}`).forEach(item => {\n        const mapItem = this.mapData[item.id.toLowerCase()];\n        const isException = mapItem ? !exists(mapItem.value) : false;\n        item.style.fill = mapItem ? isException ? this.exceptionColor : mapItem.color : this.noDataColor;\n        item.onmouseenter = this.countryHover.bind(this, item, true);\n        item.onmouseleave = this.countryHover.bind(this, item, false);\n      });\n\n      this.innerLoading = false;\n      this.cdRef.detectChanges();\n      this.onChartReady();\n\n    } catch (e) {\n      this.onCharterror({ id: CharErrorCode.loading, message: 'Could not load' });\n    }\n  }\n\n  private countryHover(item: SVGElement, hovered: boolean): void {\n    item.style.strokeWidth = getStrokeWidth(hovered);\n    item.style.stroke = getStrokeColor(hovered);\n    item.querySelectorAll<SVGElement>('.landxx').forEach(i => {\n      i.style.strokeWidth = getStrokeWidth(hovered);\n      i.style.stroke = getStrokeColor(hovered);\n    });\n  }\n\n  private onChartReady(): void {\n    if (this.innerLoading) {\n      this.innerLoading = false;\n      this.chartReady.emit();\n    }\n  }\n\n  private onCharterror(error: ChartErrorEvent): void {\n    this.chartError.emit(error);\n  }\n\n  onMapSelect({ target }: { target?: SVGElement }): void {\n    const event: ChartSelectEvent = {\n      selected: false,\n      value: null,\n      country: null\n    };\n\n    let newItem: SVGElement;\n    if (target.id === oceanId) {\n      this.selectCountry(null);\n\n    } else {\n      newItem = target;\n      while (!newItem.classList.contains(countryClass)) {\n        newItem = newItem.parentNode as SVGElement;\n      }\n    }\n\n    const country = this.mapData[newItem?.id];\n    if (country) {\n      event.selected = true;\n      event.value = countryNum(country);\n      event.country = newItem.id.toUpperCase();\n      this.selectCountry(event.country);\n    } else {\n      this.selectCountry(null);\n    }\n    this.chartSelect.emit(event);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapBaseComponent } from './base-map.component';\nimport { CountriesMapComponent } from './countries-map.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapBaseComponent, CountriesMapComponent],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CountriesMapBaseComponent as ɵa} from './lib/base-map.component';"]}